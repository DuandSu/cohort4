import census

def test_canAssertTrue():
    assert True

def test_TDD_Pipes():
    
    printLog = []
    printLog.append("Testing the TDD pipes")
    assert printLog[0] == "Testing the TDD pipes"

def test_Extract_Columns():

    x = 'Residential,1,WIN,WINSTON HEIGHTS/MOUNTVIEW,CENTRE,BUILT-OUT,1950s,2018,,3744,1781,216,0,0,898,0,0,932,239,109,51,314,837,369,5,127,182,0,256,0,2,1,1,0,1,0,0,121,0,140,6,0,0,1,197,6,294,28,1,26,0,350,202,839,9,8,1,0,0,0,0,0,0,0,0,5,0,9,0,0,0,0,4,0,189,1,0,0,0,180,127,406,2,0,0,1,788,563,1857,31,14,2,5,523,671,212,220,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"MULTIPOLYGON (((-114.04746250885692 51.08369169916868, -114.04748890331958 51.082828950326004, -114.04750504379471 51.082311839673736, -114.04751482096626 51.0819990686977, -114.04750895609112 51.08189409593599, -114.04748488976989 51.08179015718723, -114.04744291312346 51.08168850278612, -114.04738352845314 51.08159035061113, -114.04738406177242 51.08148233043896, -114.04627687819323 51.081481730232966, -114.04571947129163 51.08148046354715, -114.04457742145001 51.08147240933341, -114.04446841370131 51.081360494309386, -114.04133048439716 51.078232444449974, -114.04114761605992 51.07830563552126, -114.03978307238125 51.07694592389693, -114.03951267717682 51.07694579984571, -114.03589360360372 51.0769503201593, -114.03807664277481 51.08099023021682, -114.03834253665903 51.08147980742687, -114.03402505510566 51.08148809448836, -114.02909913998532 51.07699424005063, -114.02839967065205 51.0761804042646, -114.02789014947203 51.075526904004136, -114.02750554902514 51.074924972927306, -114.02725071998304 51.074463482302, -114.02721272600314 51.07437220986695, -114.02693809433993 51.07371246094361, -114.02672640005777 51.07307321949121, -114.02654571445716 51.07219254341813, -114.0264981723313 51.07113730644879, -114.02654468875168 51.07039955584281, -114.02680955159195 51.068457090193355, -114.02701206830538 51.066958216444505, -114.03924352679257 51.06699701706216, -114.04245996003158 51.06697932232942, -114.04773603460086 51.06697760872546, -114.04804103140972 51.066977454115296, -114.04833067371736 51.06698702741833, -114.05008562201681 51.0669858293067, -114.0507908337406 51.06698534074135, -114.05325102206672 51.066983590590326, -114.05615875157127 51.066981454057725, -114.0561460564516 51.06744144867914, -114.05612807066366 51.06789441496025, -114.05611242543118 51.06835054355428, -114.05609687226841 51.06880400662114, -114.05611999222994 51.06925829162789, -114.05606669196717 51.06971523107054, -114.05606652754386 51.06980588503404, -114.05609490574554 51.07016110191069, -114.05613290960778 51.07062337599877, -114.05613351327695 51.07071664827721, -114.05620024012724 51.071078072914055, -114.05619960962157 51.07153061795104, -114.05623827753686 51.071979772919875, -114.05627259060363 51.07244014997108, -114.05634614521942 51.072891401512265, -114.05634219330507 51.07330677654188, -114.05634736213125 51.07350337047159, -114.05631988687257 51.073794236116505, -114.05619025392917 51.0742186576489, -114.05608240943987 51.07471457972292, -114.055985912821 51.07515831828048, -114.05579182348879 51.07605502259043, -114.05559828499474 51.076946064473624, -114.0554024303557 51.077842130430945, -114.05520931216292 51.078731923426865, -114.05517942397732 51.078820482302, -114.05500436854959 51.07962659843202, -114.05499853992886 51.07971430089514, -114.0548129642739 51.08051332690782, -114.05461026711436 51.08150727469434, -114.0545037191016 51.0819389017122, -114.05448463006115 51.08200195161386, -114.05446163570097 51.082052487903816, -114.05442657134564 51.08210787434487, -114.05437725406013 51.082178495017075, -114.05432133786772 51.08223873655717, -114.05428077117062 51.082283052026426, -114.05424088763652 51.08231848446572, -114.05419019519266 51.08235713840769, -114.05411450898639 51.08240908344758, -114.0540368613876 51.0824583899758, -114.05343739674448 51.08280416210311, -114.05322755108895 51.08292392118904, -114.05301837988203 51.08304282287386, -114.05286259834048 51.083137023397505, -114.05279568017826 51.08317927364138, -114.05271670091895 51.08323467938121, -114.05270963952883 51.08324025256719, -114.05264650332425 51.083290082012034, -114.05257017129614 51.08336442051128, -114.05249452015424 51.08345166243199, -114.05245178449543 51.08352158711472, -114.05241892647554 51.08358873853318, -114.05239107835762 51.08367006980582, -114.05080259869246 51.08366652142028, -114.04848869154964 51.08367225592583, -114.0482818579418 51.08369064539886, -114.04746250885692 51.08369169916868)))"'
    x += ","
    recordLen = len(x)
    currColumn = 0
    commaChar = 0
    startChar = 0
    endChar = 0
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 11

    value = x[startChar: commaChar]
    assert value == "Residential"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "Residential"
    assert census.censusDefn["CLASS"] == 0
    assert census.censusRecord[census.censusDefn["CLASS"]] == "Residential"

    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 13

    value = x[startChar: commaChar]
    assert value == "1"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "1"
    assert census.censusRecord[census.censusDefn["CLASS_CODE"]] == "1"

    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 17

    value = x[startChar: commaChar]
    assert value == "WIN"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "WIN"
    assert census.censusRecord[census.censusDefn["COMM_CODE"]] == "WIN"
    
    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 43

    value = x[startChar: commaChar]
    assert value == "WINSTON HEIGHTS/MOUNTVIEW"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "WINSTON HEIGHTS/MOUNTVIEW"
    assert census.censusRecord[census.censusDefn["NAME"]] == "WINSTON HEIGHTS/MOUNTVIEW"
    
    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 50

    value = x[startChar: commaChar]
    assert value == "CENTRE"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "CENTRE"
    assert census.censusRecord[census.censusDefn["SECTOR"]] == "CENTRE"
    
    currColumn += 1
    startChar = commaChar + 1
    #
    currColumn = 7
    startChar = 67
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 71

    value = x[startChar: commaChar]
    assert value == "2018"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "2018"
    assert census.censusRecord[census.censusDefn["CNSS_YR"]] == "2018"
    
    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 72

    value = x[startChar: commaChar]
    assert value == ""

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == ""
    assert census.censusRecord[census.censusDefn["FOIP_IND"]] == ""
    
    currColumn += 1
    startChar = commaChar + 1
    #
    commaChar = x.index(",", startChar)
    assert commaChar == 77

    value = x[startChar: commaChar]
    assert value == "3744"

    census.censusRecord[currColumn] = value
    assert census.censusRecord[currColumn] == "3744"
    assert census.censusRecord[census.censusDefn["RES_CNT"]] == "3744"
    
    currColumn += 1
    startChar = commaChar + 1